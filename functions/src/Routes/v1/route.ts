import {Router} from 'express';
import createNewBookings from '../../v1/Controllers/booking.create.controller';
import removeBookings from '../../v1/Controllers/booking.remove.controller';
import {getLondonTime} from '../../v1/Controllers/serverTime.get.controller';
import validateFirebaseIdToken from '../../v1/Middleware/authentication';
import {editBookings} from '../../v1/Controllers/booking.edit.controller';
import {allocateEmptySlots} from '../../v1/Controllers/booking.allocate.controller';
// import appCheck from '../../v1/Middleware/appCheck';

/**
 * @swagger
 * components:
 *   headers:
 *     Content-Type:
 *       name: Content-Type
 *       in: header
 *       description: The accepted content type
 *       schema:
 *         type: string
 *       required: true
 *       example: application/json
 */
export const V1Router = Router();

/**
 * @swagger
 * components:
 *   headers:
 *     X-Firebase-AppCheck:
 *       name: x-firebase-appcheck
 *       in: header
 *       description: The authorisation token required. This token is generated by app check is required in all requests. It checks the integrity of the device making the request.
 *       schema:
 *         type: string
 *       required: true
 */
// V1Router.use(appCheck as any); //Removed due to issue in production - quick fix to remove

/**
 * @swagger
 * /v1/getLondonTime:
 *   get:
 *     summary: Retrieve the current time in London
 *     description: Retrieves the current local time in london taking into account GMT or BST. This is the time at which some business logic is based off.
 *     tags:
 *       - Utils
 *     parameters:
 *       - $ref: '#components/headers/Content-Type'
 *       - $ref: '#components/headers/X-Firebase-AppCheck'
 *     responses:
 *       200:
 *         description: The current london time on the server..
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 londonServerTime:
 *                   type: string
 *                   description: London datetime in format YYYY-MM-DDTHH:mm:ss
 *                   example: 2023-08-03T21:25:55
 */
V1Router.get('/getLondonTime', getLondonTime);

/**
 * @swagger
 * /v1/bookings/allocateEmptySlots:
 *   patch:
 *     summary: Allocates Empty Slots
 *     description: Takes a date and tries to allocate any empty slots to anything on the reserve list. If the function is run after 9pm it will ignore business unit rules.
 *     tags:
 *       - Bookings
 *     parameters:
 *       - $ref: '#components/headers/Content-Type'
 *       - $ref: '#components/headers/X-Firebase-AppCheck'
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#components/schemas/AllocateEmptySlots'
 *     responses:
 *       204:
 *         description: The operation has succeeded
 *       400:
 *         description: Sent if the request body is incorrect or conflicts with business rules
 *         content:
 *            plain/text:
 *              example: If date is restricted to business unit and space type is cars then business unit is required to make allocations against must be provided.
 */
V1Router.patch('/booking/allocateEmptySlots', allocateEmptySlots);
/**
 * @swagger
 * components:
 *   headers:
 *     Authorization:
 *       name: Authorization
 *       in: header
 *       description: The authorisation token required. This is the firebase auth token.
 *       schema:
 *         type: string
 *       required: true
 *       example: Bearer feofuq34tq83j2dq3fq3ufbi
 */
V1Router.use(validateFirebaseIdToken); // Anything after this requires login

/**
 * @swagger
 * /v1/booking:
 *   post:
 *     summary: Create a booking for a given day and space type
 *     description: You can create a booking for any given day and space type. Can also be used to book guests. You must ensure you use the correct function/domain. e.g Desks must be booked on the desk function. No content is returned if successful as you are expected to subscribe to firestore on the client. Bookings will be assigned to the reserve list if the space is full. If one booking fails for any reason then we do not commit the saves to the database and no bookings will be made. Car and Desk functions are limited to one instance each to avoid race conditions.
 *     tags:
 *       - Bookings
 *     parameters:
 *       - $ref: '#components/headers/Content-Type'
 *       - $ref: '#components/headers/Authorization'
 *       - $ref: '#components/headers/X-Firebase-AppCheck'
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#components/schemas/BookingRequest'
 *     responses:
 *       400:
 *         description: Sent if trying to book on multiple days or for both car and desk at the same time, or booking for multiple users at once or a bad request has been sent.
 *         content:
 *            plain/text:
 *              example: Bookings for different users are not allowed
 *       401:
 *         description: The user is unathorised. This usually means we have been sent an invalid firebase token.
 *         content:
 *           plain/text:
 *             example: Unauthorized
 *       403:
 *         description: The user does not have permission to make any one of the bookings they are requesting
 *         content:
 *           plain/text:
 *             example: Only Murray, Adams, and Tenzing Users can book car spaces. Please speak to a PL or Club Exec
 *       201:
 *         description: The requested bookings were made successful.
 */
V1Router.post('/booking', createNewBookings);

/**
 * @swagger
 * /v1/booking:
 *   delete:
 *     summary: Takes an array of booking ids and deletes bookings.
 *     description: Once bookings are deleted it will also run logic to ensure bookings on the reserve list are promoted or users are made aware with push notifications.
 *     tags:
 *       - Bookings
 *     parameters:
 *       - $ref: '#components/headers/Content-Type'
 *       - $ref: '#components/headers/Authorization'
 *       - $ref: '#components/headers/X-Firebase-AppCheck'
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#components/schemas/DeleteBookingRequest'
 *     responses:
 *       400:
 *         description: Sent if the array of booking ids is in the incorrect format.
 *         content:
 *            plain/text:
 *              example: Incorrect format
 *       401:
 *         description: The user is unathorised. This usually means we have been sent an invalid firebase token.
 *         content:
 *           plain/text:
 *             example: Unauthorized
 *       403:
 *         description: The user does not have permission to delete any one of the bookings they are requesting
 *         content:
 *           plain/text:
 *             example: User ID does not match that of one of the bookings.
 *       500:
 *         description: Sent if the deleting of booking or subsequent logic fails for some reason. NOTE - Deleting bookings happens before assigning new spaces. It is possible that the deletion was stil successful.
 *       204:
 *         description: The requested bookings were deleted successfully.
 */
V1Router.delete('/booking', removeBookings);

/**
 * @swagger
 * /v1/booking:
 *   patch:
 *     summary: Edits bookings to a new time slot.
 *     description: Takes an array of bookings and edits them to new slots. Only succeeds if all of the received edits can be made. If a single edit cannot be made none are made. Also tries to fill any empty slots from the reserved list once edits are made.
 *     tags:
 *       - Bookings
 *     parameters:
 *       - $ref: '#components/headers/Content-Type'
 *       - $ref: '#components/headers/Authorization'
 *       - $ref: '#components/headers/X-Firebase-AppCheck'
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#components/schemas/EditBookingsRequest'
 *     responses:
 *       400:
 *         description: Sent if the array of edits is in the wrong format.
 *         content:
 *            plain/text:
 *              example: Incorrect format
 *       401:
 *         description: The user is unathorised. This usually means we have been sent an invalid firebase token.
 *         content:
 *           plain/text:
 *             example: Unauthorized
 *       403:
 *         description: The user does not have permission to edit any one of the bookings they are requesting
 *         content:
 *           plain/text:
 *             example: User ID does not match that of one of the bookings.
 *       500:
 *         description: Sent if the editing of booking or subsequent logic fails for some reason. NOTE - Editing bookings happens before assigning new spaces. It is possible that the deletion was stil successful.
 *       204:
 *         description: The requested bookings were updated successfully.
 */
V1Router.patch('/booking', editBookings);
export default V1Router;
